label: OP    , BgDat, DATA, AddrX    , AddrY , applyAddr, no wrap, RC_CMD, next condition, loop mode    , jump to

march12_ys algo:
i0   : write              , inc xa@ya, inc ya, A        ,        ,         xa&ya end: next;             
i1   : rmw                , inc xa@ya, inc ya, A        , no wrap,         xa&ya end: repeat i1: inv a&d;
i2   : read               , inc xa@ya, inc ya, A        , no wrap,         xa&ya end: jmp    i0: inv d;            
                            
march12_xs algo:
i0   : write              , inc xa, inc ya@xa, A                 ,         xa&ya end: next;
i1   : read                                  , A                                                         
i2   : write       , inv d, inc xa, inc ya@xa, A        , no wrap,         xa&ya end: repeat i1: inv a&d;
i3   : read               , inc xa, inc ya@xa, A        , no wrap,         xa&ya end: jmp    i0: inv d;
                   
GALPAT (PINGPONG) - YS:                   
i0   : write              , inc xa@ya, inc ya, A                 ,         xa&ya end: next;     
i1   : writeH             , inc xb@yb, inc yb, selAcptoB         , inc RC;
i2   :rA0 rH1             , inc xb@yb, inc yb, B                 , inc RC, RC end   : next; 
i3   : writeH             , inc xa@ya, inc ya, A                                      jmp    i1;
i4   :                                                                                jmp    i0: inv d;

i0   : write              , inc xa@ya, inc ya, A                 ,         xa&ya end: next;     
i1   : writeH             , inc xb@yb, inc yb, selAcptoB         , inc RC;
i2   :rA0                 ,                    B                 ,                          
i3   :rH1 , inv d         ,                    A                 ,                          
i4   :rA0                 , inc xb@yb, inc yb, B                 , inc RC, RC end   : next; 
i5   : writeH             , inc xa@ya, inc ya, A                                      jmp    i1;
i6   :                                                                                jmp    i0: inv d;

LABEL: OP    , BgDataType , BgDataInv , AddrX_CMD, AddrY_CMD, ApplyAddrReg, NoLastAddrCount, RC_CMD   , NextInstrCondition, LoopMode                       , JmpTo
       nop   , _ (AL)     , _ (DFLT)  , _        , _        , _ (A)       , _              , _        , _                 , _                              , _
       read  , CS         , inv BgData, chg x@y  , chg y@x  , B           , NoLastAddrCount, inc RC   , AX end            , Loop                           , LABEL
       write , RS         ,           , inc x    , inc y    , selAcptoB                               , AY end            , Loop - inv BgData&AddrSeq
       rmw   , CB         ,           , dec x    , dec y    , selBcptoA                               , RC end              use 3b  
       ...   ,                                              , selArlB                                 , AX&AY&RC end
             ,                                              , selBrlA                                   use 3b for 3 conds
             ,                                              , AxorB
             ,                                              , selBrrA

repeat thi co the invert addr/data, jump thi ko
chua thu truong hop co hon 3 nested loop, with different modified address/data 

1026 LEs
434  Regs

without loop control comb logic:
528  LEs
418  Regs

